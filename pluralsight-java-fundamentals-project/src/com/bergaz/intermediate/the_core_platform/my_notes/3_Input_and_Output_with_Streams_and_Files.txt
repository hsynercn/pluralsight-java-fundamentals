Section overview:
    -Streams
    -Stream errors and cleanup
    -Chaining streams
    -File and buffered streams
    -Package java.nio.file
    -File system
    -Creating and working with zip file system

Stream is an ordered sequence of data
    -Provides a common i/o model
    -Hides details of source
    -Stream types are unidirectional

Stream categories
    -byte stream as binary
    -text stream as unicode

*Int is a 32-bit(4 Byte) value
*In java compiler can take care of a widening conversion
    -Like we can provide a byte for an int method parameter

Byte side:              Text side:
InputStream             Reader
int read()              int read()
int read(byte[] buff)   int read(char[] buff)

OutputStream            Writer
void write(int b)       void write(int ch)
void write(byte[] buff) void write(char[] buff)
                        void write(String str)


Common Input/OutputStream Derived Classes

InputStream                             Reader
-ByteArrayInputStream                   -CharArrayReader
-PipedInputStream                       -StringReader
    >(better producer-consumer cases)   -PipedReader
-FileInputStream                        -InputStreamReader > FileReader

OutputStream                            Writer
-ByteArrayOutputStream                  -CharArrayWriter
-PipedOutputStream                      -StringWriter
-FileOutputStream                       -PipedWriter
                                        -OutputStreamWriter > FileWriter


Stream Realities
Error handling:Stream operations can throw exceptions, we rely on external data resources
Cleanup:We can't rely on Java garbage collector to clean used stream objects

We should provide a reliable cleanup mechanism for streams, an automated cleanup flow.

AutoCloseable Interface:
-One method > close
-Base interface of Closeable interface
    interface Closeable extends AutoCloseable {
        void close() throws IOException
    }
-Provides support for try-with-resources

Try-with-resources
-Automates cleanup of one or more resources
-A "resource" is any type that implements AutoCloseable
-Syntactic similarity with try
-Optionally includes catch blocks
    *Handle try body
    *Handle close method call

Try-with-resources block call close function at the end of the try block, it handles the exceptions as expected also
it handles the close function exceptions. In a practical manner with less line we provide same functionality with
basic try catch flow.

Chaining Streams
-One stream instance leverages another
-Creates higher-level functionality
-Simplifies reusability
-Chain using constructor

For example InputStreamReader leverages chaining
-Reader behaviour over InputStream
-Character behavior over binary

*Commonly higher level stream close also closes the lower level stream

We can create our own "high-level" streams
    -Most commonly chain similar streams
    Chain a reader over a reader

Classes available to simplify customization
-FilterReader, FilterWriter
-FilterInputStream, FilterOutputStream
-Abstract classes
-Methods call to contained stream methods
-Override only customized methods

Accessing Files

Class for each stream type in java.io package
    -FileReader
    -FileWriter
    -FileInputStream
    -FileOutputStream

*The java.io classes are now deprecated
    -Still widely used in code

Buffered Streams:
-Direct file access can be inefficient
-Buffered stream can improve efficiency
    *Buffers content in memory
    *Performs reads/writes in large chunks
    *Reduces underlying stream interaction

Buffering is available for all 4 stream types
-BufferedReader
-BufferedWriter
-BufferedInputStream
-BufferedOutputStream

Buffered Streams and Line Breaks
    -Line breaks vary across platforms
        Unix \n (new line)
        Windows \r\n (carriage return and new line)

Buffered streams add line break support
-Uses correct value for current platform

*BufferedWriter:Generates line breaks with: newLine()
*BufferedReader:Line based read with: readLine()

Accessing Files with the java.nio.file Package:
-java.io FileReader, FileWriter, FileOutputStream, FileInputStream are deprecated
-java.io InputStream, OutputStream, BufferedReader, BufferedWriter they are still widely used only FileXXX classes are
deprecated

-java.nio provides several benefits
    *Better exception reporting
    *Better scalability, better performance at large files
    *More file system feature support(security etc)
    *Simplified common tasks

Path
    -Used to locate file system item
    -Can be file or a directory

Paths
    -Static Path factory methods
    -From string-based hierarchical path
    -From URI

Files Type
    -Static methods for interacting with files
    -Create, copy, delete etc
    -Open file streams
        *newBufferedReader
        *newBufferedWriter
        *newInputStream
        *newOutputStream
    -Ream/write file contents
        *realAllLines:open file read all content and close it
        *write:open a file write all content and close it


Files Systems
-Files are contained within a file system
    *Has a default file system
    *Specialized file systems are supported (Zip etc.)
-Path instances are tied to a file system
    *Paths class works only for default file system

File System Types
    FileSystem:Represents an individual file system, factory for Path instances
    FileSystems:Static FileSystem factory methods
        -Open or create a file system: newFileSystem

Accessing File Systems
    -Specifies of URI cary greatly
    -Zip file system uses "jar:file" scheme
        jar:file:/test/data/bar.zip

Getting a path from default file system:
    Path sourceFile = FileSystems.getDefault().getPath(sourceFilePathString);
    Path sameSourceFile = Paths.get(sourceFilePathString);
    *This two lines return same Path, Paths.get is just a shortcut for getting a path from default FileSystem


SUMMARY

java.io package
    -Stream-based IO
    -Legacy file/filesystem types

java.nio.file package
    -File/filesystem types

Stream
-Ordered sequence of data
-Unidirectional
-Binary or character based
-Can be chained together

Try-with-resource
-Automates resource cleanup
-Resource implement AutoCloseable

Path
    -Locates a file system item
    -Includes the file system

Paths
    -Factory for Path instances for default file system

Files
    -Methods for interacting with files

FileSystem
    -Represent a file system
    -Can have specialized such as zip
    -File systems identified by URIs

FileSystems
    -Methods to create/open file system