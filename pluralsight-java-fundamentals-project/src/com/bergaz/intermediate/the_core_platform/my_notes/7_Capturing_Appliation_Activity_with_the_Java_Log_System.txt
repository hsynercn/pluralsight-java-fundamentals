Overview
-Log system management
-Making log calls
-Log levels
-Types of log methods
-Creating and adding log components
-Built-in handlers and formatters
-Log configuration file
-Making the most of the log system, logger naming and hierarchy

Log System
-We need a way to capture app activity
    *Record errors
    *Track usage info
    *Debug

The required level of detail can vary
-Sometimes we need lots of details
    *Newly deployed app
    *Too many error
-Generally we need less detail
    *App becomes mature
-Java provides a built-in solution
    *java.util.logging

Log System Management
-Log system is centrally managed
    *There is one app-wide log manager
    *Manages log system configuration
    *Manages objects that do the actual logging
-Represented by LogManager class
    *One global instance
    *Access with static method LogManager.getLogManager

Making Log Calls
-Logger class, provides logging methods
-We access Logger instances with LogManager
    -getLogger method
    -Each instance named
    -A global logger instance is available, we can get it by Logger class' static field GLOBAL_LOGGER_NAME

Logging Levels
-Levels control logging detail
    *Each log entry is associated with a level, included with each log call
    *Each logger has a capture level, use setLevel method, ignores below levels
-Each level has a numeric value
    *7 basic log levels
    *2 special levels
    *can define custom levels

LEVELS
Level       Numeric Value       Description
OFF         Integer.MAX_VALUE   Logger capture nothing
SEVERE      1000                Serious failure
WARNING     900                 Potential problem
INFO        800                 General info
CONFIG      700                 Configuration info
FINE        500                 General developer info
FINER       400                 Detailed developer info
FINEST      300                 Specialized developer info
ALL         Integer.MIN_VALUE   Logger capture everything

Types of Log Methods
-Simple log method
-Level convenience methods
-Precise log method
-Precise convenience methods
-Parameterized message methods

Simple log:
logger.log(Level.SEVERE, "This is a severe log message");
    Oct 07, 2020 8:33:46 PM com.bergaz.intermediate.the_core_platform.section_07.SimpleLogMethod logThisMethod
    SEVERE: This is a severe log message

Level convenience method:
logger.severe("severe");
Oct 07, 2020 8:42:07 PM com.bergaz.intermediate.the_core_platform.section_07.LevelConvenienceMethod main
SEVERE: severe

Precise log method:Sometimes standard log methods get it wrong
logger.logp(Level.SEVERE, "this.is.some.shitty.class", "someMethod", "it fcked up");
Oct 07, 2020 8:50:46 PM this.is.some.shitty.class someMethod
SEVERE: it fcked up

Precise convenience methods:Simplify logging common method actions, logs a predefined message
*Always logged as Level.FINER
Method      Message
entering    ENTRY
exiting     RETURN

Parameterized Message Methods
-log, logp
    *Parameter substation indicators explicitly appear within message, uses simple positional substituton
-entering, exiting
    *values appear after default message, space separated
-values always passed as objects