Overview
    -The role of collections
    -Collections adn type safety
    -Common collection methods
    -Collections and entry equality
    -New collection methods in Java 9
    -Converting between collections and arrays
    -Common collections interface and classes
    -Sorting behavior
    -Map collections

Managing Groups of Data
    -We need to manage groups of data
    -Most basic solution is to use arrays

Arrays have limitations
    -Statically sized
    -Requires explicit position management
    -Little more than a bunch of values

    Collections provide more powerful options

The Role of Collections
    -Iterable
    -Can provide type safety
    -Tend to dynamically size

A wide variety of collections are available
    -May be simple list of values
    -Can provide optimization or sophistication
        *Ordering
        *Prevent duplicates
        *Manage data as name/value pairs

Collections and Type Safety

By default collections hold Object types
    -Must convert return values to desired type
    -Does not restrict types of values added

Collections can be type restricted
    -Uses the Java concept of generics
    -Type specific during collection creation

Collection type restriction is pervasive
    -Return values appropriately typed
    -Adding values limited to appropriate type

Collection Interface
-Each collection type has its own features, but there are many that are common
-Collection interface
    *Provides common collection methods
    *Implemented by most collection types
        >Map collections are notable exception
    *Extends iterable interface

Common Collection Methods

Method      Description
size        number of elements
clear       remove all elements
isEmpty     return true if no elements
add         add single element
addAll      add all members of another collection
contains    return true if contains element
containsAll return true if contains all members of another collection
remove      remove element
removeAll   remove all elements contained in another collection
retainAll   remove all elements not contained in another collection

Java8 Collection Methods
-Java8 introduces lambda expressions, simplify passing code as arguments
-Collection methods that leverage lambdas
    *forEach:perform code for each member
    *removeIf:remove element if test is true

Converting Between Collections and Arrays
-Some APIs require an array often due to legacy or library code
-Collection interface can return an array
    *toArray():returns Object array
    *toArray(T[]] array):returns array of type T

-Array content can be retrieved as collection
 -Use Arrays class' asList method

Collection Types
-Java provides a vide variety of collections, each with specific behavior
-Collection Interfaces:Provide contract for collection behavior
-Collection classes:Provide collection implementation, implement one or more collection interfaces

Common Collection Interfaces
Interface           Description
Collection          Basic collection operations
List                Collection that maintains a particular order
Queue               Collection with the concept of order and specific "head" element
Set                 Collection that contains no duplicate values
SortedSet           A Set whose members are sorted

Common Collection Classes
Class       Description
ArrayList   A List backed by resizable array, efficient random access but inefficient random inserts
LinkedList  A List and Queue backed by a doubly-linked list, efficient random insert but inefficient random access
HashSet     A Set implemented as a hash table, efficient general purpose usage at any size
TreeSet     A SortedSet implemented as a balanced binary tree, Members accessible in order but less efficient to modify
            and search than a HashSet

Sorting
Some collections rely on sorting
There is two ways to specify sort behavior

Comparable interface
-Implemented by the type to be sorted
-Type specifies own sort behavior, should be consistent with equals

Comparator interface
-Implemented by type to perform sort
-Specifies sort behavior for another type

Comparable interface requires "int compareTo()" method
* compareTo should return for:
- : this < other
0 : this = other
+ : this > other

Comparator interface requires "int compare(Type x, Type y)" method
- : x < y
0 : x = y
+ : x > y

Map Collections
-Maps store key/value pairs
-Keys are unique
-Values can be duplicated
-Values can be null

Common Map Types

Interface   Description
Map         Basic map operations
SortedMap   Map whose keys are sorted

Class       Description
HashMap     Efficient general purpose Map implementation
TreeMap     SortedMap implemented as a self-balancing tree
            Supports Comparable and Comparator sorting

Common Map Methods
Method          Description
put             Add key and value
putIfAbsent     Add key and value if key not contained or value null
get             Return value for key, if key not found return null
getOrDefault    Return value for key, if key not found return the provided default value
values          Return a Collection of contained values
keySet          Return a Set of the contained keys
forEach         Perform action for each entry
replaceAll      Perform action for each entry replacing the each key's value with the action's result

Common Sorted Map Methods > Sorted Map interface extends Map interface
Method      Description
firstKey    Return first key
lastKey     Return last key
headMap     Return a map for all keys are less than the specified key > EXCLUSIVE OF KEY PASSED
tailMap     Return a map for all keys that are greater than or equal to the specified key > INCLUSIVE OF KEY PASSED
subMap      Return a map for all keys that are greater than or equal to the starting key and less than the ending key


SUMMARY

Collections hold and organize values
-Iterable
-Tend to dynamically size
-CAn provide optimization or sophistication

Collections can be type restricted
-Uses Java generics to specify type
-Return values appropriately typed
-Typing enforced on added values

Can convert between collections and arrays
-Collections provide toArray method
-Arrays class provides toList method

Some collections provide sorting
-Comparable interface, defines own sort
-Comparator interface, specifies sort for another type

Map collections
-Stores key/value pairs
-Keys are unique
-Some maps sort keys





