Overview
-Command-line arguments
-Managing app and user properties
-Persisting and restoring properties
-Deploying property defaults in a package
-Default class loading behavior
-Working with class paths
-Execution environment information

Command-line Arguments
-Can pass info to app on command line, easiest way to pass startup info
    *Target of app processing, input/output files, URLs, etc.
    *Behavior options
-Arguments passed as a String array
    *Received by app's main function
    *Each argument is a separate element, separated by OS's whitespace

*When we provide a multiple part cmd line input for application like input file multiple part.txt file name we can
wrap this input with quote to use as a single value in args array like "input file multiple part.txt"

Managing Persistable key/Value Pairs
-Apps often need persistable key/value pairs
    -Store app configuration information
    -Track simple aspects of app state
    -Track user preferences

-Need an easy way to manage key/value pairs
    -Ste/retrieve values
    -Store/load between app executions
    -Provide default value when not set

We can use java.util.Properties class to get this functionality

Properties Class
-Inherits from HashTable, HashTable is the predecessor of Hashmap, Hashmap implemented later, Hashtable does not
permits null values
-Keys and values are Strings

Working with properties
-setProperty method
    *sets the current value for a key
    *creates or updates key as needed
-getProperty
    *returns the current value for the key
    *return null if not found and no default

Store and Load Property Values
-Properties can be persisted
    *Can be written to and read from a stream
    *Can optionally include comments
    *Support 2 formats:Simple text and XML

Properties Persisted as Simple Text
-Persist as simple text
    -Use store & load methods
    *Supports OutputStream/InputStream
    *Supports Writer/Reader
    -Normally name file with .properties suffix

-One key/value pair written per line
    -Key/value normally separated by = or :
        *Whitespace surrounding =,: ignored
        *Whitespaces acts as key/value separator if occurs without = or :
        *Can escape whitespace, =, or : with \
    -Start a line with # or ! for comments
    -Blank lines ignored

Properties Persisted as XML
-Persist as XML
    *Use storeToXML and loadFromXML methods
    *Name with .xml suffix
-One key/value pair per XML element
    *Stored as element named entry, key stored as attribute, value stored as element value
    *Use comment element for comments

Providing Default Properties
-Simplifies configuration
-Provide initial values
-Cumbersome to explicitly provide defaults for each getProperty call
-Can create Properties with defaults
    *Pass default Properties to constructor
    *Default properties take precedent over default vale passed to getProperty

Including Default Properties in Package
-Default property file can be part of package
    *Create .properties file at development time
    *Build process includes file in package
-Can load file from package
    *Takes advantage of Java resource system
    *Use getResourceAsStream method, accessed through any class in package
        ClassName.class, this.getClass()

Class Loading
-Most applications do not stand alone
    *Rely on classes in other packages
    *JDK packages located automatically
    *May need help locating other packages

Locating packages at development time
-Specific to IDE

Locating packages at runtime
-Java provides a number of options

Default Class Loading
-Java searches current directory,
    classes must be .class and must be under package directories

Specifying Class Path
-Can provide the list of paths to search
    *Search in the order they appear
    *Current directory used only if in list
-Two options for specifying class path
    *Environment variable
    *Java command option

Specifying Class Path as Environment Variable
-We can specify with environment variable CLASSPATH
-Becomes default path, all programs use it
-It is a shared space, can break others

Class Path Structure
-Paths provided as delimited list
-To reference classes in .class files, path to folder containing package root
-To reference classes in jar files, path to jar file name including jar file name

sample class paths:

Windows:
    java -cp \psdir;\libdir com.pluralsight.training.Main
Unix:
    java -cp /psdir:/libdir com.pluralsight.training.Main

Applications searches psdir first, later libdir


For jar file referencing
Windows:
    java -cp \psdir\training.jar;\libdir com.pluralsight.training.Main
Unix:
    java -cp /psdir/training.jar:/libdir com.pluralsight.training.Main


Class Loading with Java -jar Option
-Java -jar option locks down class loading
    *No other class loading source is used
-Provides tight control

ourapp.jar: Contains a manifest file
                *Main-Class: com.pluralsight.training.Main
            Contains all dependent .class files

SAMPLE COMMAND:
    java -jar ourapp.jar

With this execution we trust to jar file

Execution Environment Information
-Apps often need environment information
    *User, system, Java config, app specific info
-Java provides 2 common solutions
    *System properties
    *Environment variables

System Properties
-Java provides info about environment with System.getProperty
-User, Java installation, OS config info
-Each value accessed with a string name

Environment Variables
-Most OS's support environment variables
-Many variable set by OS
-We can provide app specific variables
-Sometimes they overlap with system properties


SUMMARY
-Apps require more than just code, behavior is affected by many factors
-Command line arguments received to main method
-Properties class can provide name/value pairs, they can persist across executions, supports default vals
-Class path control where classes are found
    *Can set with CLASSPATH, can effect other apps
    *Better to use Java command -cp option, sets path specific to each app
-Execution environment info is available
    *Java provides system properties
    *OS environment variable access, can provide app specific variables
