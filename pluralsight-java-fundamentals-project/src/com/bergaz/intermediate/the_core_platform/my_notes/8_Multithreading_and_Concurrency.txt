Overview
-Single threading vs multithreading
-Threading foundation types
-Thread pools
-Concurrency issues
-Mutual thread synchronization
-Concurrency related types and packages

Course's Threading and Concurrency Coverage
-New to threading:Provides building blocks for threading and concurrency
-Already knows threading:Apply your knowledge in Java

A Quick Look at the Basics
-Process
    *Instance of a program/application
    *Has resources such as memory, etc.
    *Has at least one thread
-Thread
    *Sequence of programmed instructions
    *The thing that executes a program's code
    *Utilizes process resources


                            Concurrency
______                          |
      |-----Thread0>>>>>>>>>>>>>|>>>>>>>>>>>>>>>>>>>>>
      |                         |
      |---------Thread1>>>>>>>>>|>>>
Memory|                         |
      |----------------Thread2>>|>>>>>>>>>>>>
      |    \                    |
      |     \-------Thread3>>>>>|>>>>
______|                         |

          Time------------------------------------------->

*To prevent resource access error we need to coordinate the threads while accessing resources

The Case for Multithreading
-Can enable more complete CPU use
    *Thread often wait on non-CPU tasks, interacting with storage, networks, etc.
    *Most computers have multiple CPU cores, allows things run in parallel

-Why does any of this matter
    *Can reduce perceived execution times, less wall-clock time passes

The Move to Multithreading
-Multithreading is an explicit choice
    *Must break problems into parts
-Java provides different levels of abstraction
    *Support very direct handling:manual creation and coordination
    *Support higher level handling:simplified creation and coordination

Java Thread Foundation
-Limited threading abstraction
    *Very close to standard OS behavior
    *Each thread started for a specific task, terminates at the end of task
-Requires explicit management
    *Responsible to manage coordination
-Exceptions tied to thread
    *Each thread must handle own exception

1-Runnable Interface
    *Represents a task to be run on a thread
    *Only member is the run method
2-Thread class
    *Represents a thread of execution
    *Can interact with and effect thread state
    *Begin execution with start method

Thread Management Details
-Value of the Thread class
    *Allows direct control over thread startup, shutdown, coordination
-Challenge of the Thread class
    *Responsible to efficient manage thread startup, shutdown, coordination
    *Easily misused

Abstracting Thread Management with Thread Pools
-Java offers thread pools
    *Creates a queue for tasks
    *Assigns tasks into a pool of threads
    *Handles details of managing threads

Thread Pools Types
-ExecutorService interface
    *Models thread pool behavior
    *Can submit tasks
    *Request and wait for pool shutdown
-Executor class
    *Methods for creating thread pools
    Dynamically sized pools
    Size limited pools
    Pools that schedule tasks for later

Creating a Closer Relationship Between Thread Tasks
-Multithreading is not always loosely coupled
    *Caller may need results from worker
    *May need to know if task succeeded

Thread Result Manual Handling
    -When we initiate a thread we can check the result manually, we can store result at a memory location and we can
    check the result from amin thread
Thread Exception Manual Handling
    -The same logic applies, we can get the exception info from memory from main thread

*Manual handling requires lots of effort, it is a high maintenance method
We desire a simpler mechanism to get result and exception data

Threading Relationship Types
    -Callable interface
        *Represents a task to be run on a thread
        ***Can return result
        ***Can throw exceptions
        *Only member is the call method
    -Future interface
        *Represents results a thread task:Returned by ExecutorService.submit
        *The key method is get
            Blocks until task completed
            Returns Callable interface result
            Throws Callable interface exception

Concurrency Issues
-The challenge of concurrency
    *Threads sometimes share resources
    *No problems if resources only read
    *Changes must be coordinated
-Failure to coordinate can create problems
    *Receive wrong results
    *Crash program

Atomic Operations
-When we change a value, for example an integer incrementation at a class there are several steps for this operation
read value>perform addition>write result back to memory in this flow another thread can take the control of the resource
this may lead a incorrect result
-To prevent this flow at all we can design incrementation as an atomic operation

Coordinating Method Access
-Synchronized methods
    *Coordinate thread access to methods
    *Use synchronized method modifier, class can have as many as needed
-Synchronization managed per instance
    *No more than one thread can be in any synchronized method at a time

Using Synchronized Methods
-When to use synchronized
    *Protect modification by multiple threads
    *Reading value that might be modified by another thread
-Why not always use synchronize methods
    *Has a significant overhead
    *Use only in multithreading scenarios
-Constructors are never synchronized
    *A given object instance always created on exactly one thread

Manual Synchronization
-Synchronized methods
    *Automated concurrency management
    *Used lock of current object instance
-All Java objects have a lock
    -Can manually acquire that lock
    *Use synchronized statement block
    *Available to any code with a reference

*We can lock an object explicitly with a synchronized(object) block

Why USe Synchronized Statement Blocks
-Synchronized blocks provide flexibility
    *Enables use of non-thread safe classes
    *Can protect complex blocks of code
    *Sometimes synchronized methods just are not enough

