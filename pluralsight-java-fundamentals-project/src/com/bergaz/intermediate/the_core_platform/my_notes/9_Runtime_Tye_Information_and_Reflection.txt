Overview
-Reflection overview
-Java type representation
-Accessing a type's Class instance
-Accessing information about a type
-Accessing type member information
-Interacting with object instances
-Creating type instances
-Dynamic type loading

Reflection
-Core capabilities of reflection
    *Examine types at runtime
    *Dynamically execute and access members

The Need for Reflection
-Apps do not always control types used
    *Common in advanced app designs
    *Common in tool and frameworks
-Often dynamically load types
    *Type is not known at compile time
    *There is no type-specific source code
-Requires special runtime type handling
    *Examine types at runtime
    *Dynamically execute and access members

Runtime Examination
-Can fully examine objects at runtime
    *Type, Base types
    *Interfaces implemented
    *Members
-Variety of uses
    *Determine a type's capabilities
    *Tools development
        -Type inspector/browser
        -Schema generation

Dynamic Execution and Access
-Can access full capability of type
    *Construct instances
    *Access fields
    *Call methods
-Variety of uses
    *Configurable application designs, specific tasks externally controlled
    *Inversion of control application designs
        -App provides fundamental behavior
        -Classes added to specialize behavior

Type as a Type
-Type is the foundation of any app solution
    *We use types to model BUSINESS and TECH issues
-Java uses types to model type issues
    *Fundamental type is the Class class
    *Each type has a Class instance
    *Describes the type in detail

Class Representation
+-------------------------------------+					+--------+
| simpleName                          |<----------------|id      |
| +-----------+                       |         		|+----+  |
| |BankAccount|                       |                 ||1234|  |
| +-----------+                       |                 |+----+  |
|                                     |                 |balance |
| fields                              |		            |+----+  |
| +--+-------+                        |                 || 0  |  |
| |id|balance|                        |                 |+----+  |
| +--+-------+                        |                 +--------+
| constructors                        |
| +-----------+-----------+           |					+--------+
| |BankAccount|BankAccount|           |<----------------|id      |
| +-----------+-----------+           |                 |+----+  |
| methods                             |                 ||1234|  |
| +-----+----------++------+--------+ |                 |+----+  |
| |getId|getBalance|deposit|withdraw| |                 |balance |
| +-----+----------++------+--------+ |                 |+----+  |
+-------------------------------------+                 || 500|  |
                                                        |+----+  |
                                                        +--------+


*Instance of Call class acts as a mold

BankAccount acct1 = new BankAccount("1234");
BankAccount acct2 = new BankAccount("5678", 500);

Accessing a Type's Class Instance
-From a type reference
    *Call getClass method
-From string name
    *Call Class.forName static method, pass fully qualified type name
-From type literal

From type literal, type reference and string name all of them return exact same Class class instance

Accessing Type Information
-Every aspect of a type is knowable
    *Superclass
    *Implemented interfaces
    *Modifiers
    *Members

Type Access Modifiers
-Retrieving type access modifiers
    *Use getModifiers
    *Returned as a single int value, each modifier is a separate bit
-Use Modifier class to interpret modifiers
    *Provides static fields for bit comparisons, requires use of bitwise and/or
    *Provides static helper methods, each checks for specific modifier

Types to Describe Type Members
-Field: Name, Type
-Method: Name, Return Type, Parameter Types
-Constructor: Name, Parameter Types

+------------------------------+-----------------------------------+
| Type's declared members only | Type's declared inherited members |
|							   |                                   |
|*Public, protected & private  |*Public only                       |
|							   |                                   |
+------------------------------+-----------------------------------+
	getDeclaredFields				getFields
	gecDeclaredMethods				getMethods
	getDeclaredConstructor  		getConstructors

*important: We can't get parent class' constructors from getConstructors method we only get public constructors
getDeclaredConstructors returns all constructors public, protected and private

More About Members
-Can request individual member by signature
    *getField: Pass name
    *getMethod: Pass name plus parameter types
    *getConstructor: Pass parameter types
-Members have access modifiers
    *Use getModifiers
    *Interpret with Modifier class

Interacting with Object Instances
-Interacting with object instances
    *Reflection not limited to describing types
    *Can access and invoke members



