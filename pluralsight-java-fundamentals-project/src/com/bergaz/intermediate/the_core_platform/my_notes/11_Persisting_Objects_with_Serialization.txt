Overview
-Purpose and capabilities of serialization
-Making a type serializable
-Serializing/deserializing an object
-Creating class version compatibility
-Custom serialization
-Transient field

Java has built-in ability to persist objects
-Store from runtime into a byte stream
-Restore from byte stream into runtime

Most cases requires very little programming
-Leverages reflection
-Operates only on instance members
-Customizable

Opens up many possibilities
-Save to file system
-Save in a database
    *RDBMS can store as blob
    *OODBMS can often store directly
-Pass across memory address boundaries
-Pass over network

Serialization
SERIALIZING: Storing an object-graph to a byte stream
DESERIALIZING: Restoring an object-graph from a byte stream

Serialization Types
    -Serializable
        *Implemented by serializable types
        *Indicates that type supports serialization
        *Has no methods

    -ObjectOutputStream
        *Serializes object-graph to stream

    -ObjectInputStream
        *Deserialized stream to object-graph

Being Serializable
-Implement Serializable
-Members are serializable
    *Primitive types are serializable
    *Others must implement Serializable

*Key point is all members have to be serializable

Class Version Incompatibility
-When we serialize an object Java uses a calculated serialization id, Java uses same value for deserialization, if we
change the class fields we also change the calculated id. Because of this change we can't load previous serialized
classes

Creating Class Version Compatibility
-Serial version unique identifier
    *Indicates version compatibility
    *Compatible versions have same value
-Java can calculate at runtime
    *Value affected by a number of factors
        -Full type name
        -Implemented interfaces
        -Members
    *Type content determines compatibility
-Can specify as part of type definition
    *Developer determines compatibility
-Specifying serial version unique identifier
    -Add serialVersionUID field
    *Must be a long
    *Must be static final
    *Should be private
-Calculated for initial version of type
    *Use serialver utility
-Use same value for future versions to maintain version compatibility

-The serialver utility
    *Perform same calculation as Java runtime
    *Found in JDK bin folder
    *IDEs often provide a plug-in
-Using serialver utility
    *Uses class' class file: Will search in local folder, can specify -classpath
    *Can pass class name on command line: Display value to console
    *Can use -show option: Opens a simple GUI

Customizing Serialization
-Can add custom serialization handling:
    *Add writeObject method to type
    *Add readObject method to type
-Methods called through reflection, methods normally marked private

Implementing writeObject method
-Return type of void
-Include throws clause, IOException
-Accepts ObjectOutputStream
    *Use to write values
    *defaultWriteObject for default behavior

Implementing readObject method
-Return type of void
-Include throws clause
    *IOException
    *ClassNotFoundException
-Accepts ObjectInputStream
    *Use to read values
    *Use readFields to get field name info, can access values by name
    *defaultReaderObject for default behavior




