Overview
-Purpose and capabilities of serialization
-Making a type serializable
-Serializing/deserializing an object
-Creating class version compatibility
-Custom serialization
-Transient field

Java has built-in ability to persist objects
-Store from runtime into a byte stream
-Restore from byte stream into runtime

Most cases requires very little programming
-Leverages reflection
-Operates only on instance members
-Customizable

Opens up many possibilities
-Save to file system
-Save in a database
    *RDBMS can store as blob
    *OODBMS can often store directly
-Pass across memory address boundaries
-Pass over network

Serialization
SERIALIZING: Storing an object-graph to a byte stream
DESERIALIZING: Restoring an object-graph from a byte stream

Serialization Types
    -Serializable
        *Implemented by serializable types
        *Indicates that type supports serialization
        *Has no methods

    -ObjectOutputStream
        *Serializes object-graph to stream

    -ObjectInputStream
        *Deserialized stream to object-graph

Being Serializable
-Implement Serializable
-Members are serializable
    *Primitive types are serializable
    *Others must implement Serializable

*Key point is all members have to be serializable

Class Version Incompatibility
-When we serialize an object Java uses a calculated serialization id, Java uses same value for deserialization, if we
change the class fields we also change the calculated id. Because of this change we can't load previous serialized
classes
